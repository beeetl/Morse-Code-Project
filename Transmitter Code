/*
AVR Morse Code Transmitter program.
J Phillips DEC 2023.

This program takes an input from a touchpad to correspond to a letter of the English alphabet, and puts a corresponding number into an array.
This array then gets iterate through upon reaching a transmit command, which transmits the array into a series of dots and dashes (Morse code symbols . - ), through
the IR Transmitter in PD0 on this projects ATMEGA 328P.

See also- Morse Code Receiver Program, Morse Code Remote Program.
*/

#include <avr/io.h>
#include <math.h>
#include <C:\avr\i2c.h>
#include <C:\avr\lcd_16x2_i2c.h>
#include <C:\avr\spi.h>
#include <C:\avr\lcd28.h>
#include <C:\avr\lcd28_touchpad.h>
#include <string.h>
#include <avr/interrupt.h>
#include <C:\avr\freq_328.h>

void delayms(int);					//general delay function.
void outlong();						//delay function with PB0=1 for a duration.
void outshort();					//delay function with PB0=1 for a duration.
void outputmorse();					//iterates through a set of instructions.
int morsedecode(char[]);			//splits the instructions up into substrings of 5 character length.
void initialize_touchpad();			//visualization of button areas along the touchpad used in the project.	
void storeinstruction(int, int);	//takes x,y data from touchpad and applys to array instructionset.
void clearinstructionqueue();		//resets array instructionset and its pointer integer.

const int time_unit = 100;			//general timekeeping number that delays are based upon.
const int dashtime = time_unit * 2;	//general timeframe for a dash within delay functions.
const int dottime = time_unit * 1;	//general timeframe for a dot within delay functions.
int instructionset[20];				//LCD based instructions are sent to this array.
int instructionstep;				//index for instructionset array.
char alphabet [270] = "01200100021010210020020000010211020000020020001112101200100211200102001112001102110120102000020120000012000012011201001210112110022";
//stores the Morse alphabet as a single string (01200 is A, 10002 is B, etc) 0's behind a characters 2 are only used to keep the sizes consistent, all characters are length 5 this way.

class lcd_16x2_i2c textdisplay;		//initializer for the text display screen, for showing selected characters and corresponding Morse codes of said characters.
class touch_pad_xpt2046 touchpad;	//initializer for the touchpad to receive characters from user to send through IR transmitter.
class lcd_28 disp;					//initializer for visualization on touchpad.

int main(void)
{
	initialize_touchpad();				//visualization to help with button accuracy
	DDRD = 0b1;							//this port sends Morse outputs
	instructionstep = 0;				//used to place the Morse letter into the instruction set correctly through the storeinstruction function.
	char x, y;							//values obtained from the touchpad correlating with x and y positons.
	while(1){
		touchpad.wait_for_press(); 		//stops in the while loop until a button is pressed.
		touchpad.read_xy(x, y);    		//when a button is pressed, store the positions into the characters x & y.
		x = ceil((9 * x) / 118)+1;   	//converts the raw x data to a value between 1 and 9.
		y = ceil((3 * y) / 118)+1;		//converts the raw y data to a value between 1 and 3.	
		int index = 9 * (3-y) + x;		// converts this x and y value to a corresponding value between 1 and 27, for all 26 letters and a send code.
		storeinstruction(index, instructionstep);	//takes this xy product variable index and stores it within the instructionset string.
		if (index == 27)				//27 corresponds to the send instruction, which proceeds into the outputmorse function.
			outputmorse();				//takes the current array instructionset and outputs Morse accordingly.
		instructionstep++;				//index variable for current instruction.	
		delayms(4000);					//delay as to avoid multi-pressing on LCD screen.
	}										//end of while(1)
}												//end of main

void outputmorse(){
	char morseletter[4] = "";							//string initializer to output more bits-wise through morsedecode function
	for (int i = 0; i < 20; i++)						// loops through each piece of instructionset (size 20).
	{
		if (instructionset[i] == 27) return;			//27 corresponds to stop sequence, immediately return.
		int currentcharacter = (instructionset[i]-1)*5;	//each character is 5 pieces long, this lets us key in every 5 pieces of data in instructionset to grab a whole Morse piece.
		for(int j = 0; j < 5; j++)						//iterating through each 5 pieces per Morse character.
		morseletter[j] = alphabet[currentcharacter+j];	//storing the 5 pieces within the initialized string Morseletter.
		morsedecode(morseletter);						//sending this created array through to Morsedecode.
	}														//end of for
	clearinstructionqueue();							//resetting the instruction array.
}															//end of outputmorse()

void storeinstruction(int character, int index){
	if (character == 27)					//we dont want to do anything if the character is 27, corresponding to stop.
		return;									//early return
	instructionset[index] = character; 		// puts the current instruction (dashes, dots, and sentence ends as 1's 0's and 2's respectively) into the instructionset as letter.
	textdisplay.da(0x40 + character); 		//displays the ascii character to the text display. (40 + 1 for a, since 0x41 is 'A', etc).
}												//end of storeinstruction()

void initialize_touchpad(){
	freq_8mhz();									//sets clock frequency to 8 MHZ to display the button edges faster.
	for (int i = 1; i < 9; i++)						//iterating through edge columns.
		disp.line(36*i, 0, 36*i, 320, 255, 255, 255);	//displaying edge columns.
	for (int i = 1; i <= 3; i++)					//iterating through edge rows.
		disp.line(0, 80*i, 320, 80*i, 255, 255, 255);	//displaying edge rows.
	freq_1mhz();									//set clock frequency back to default for duration of runtime.
}														//end of initialize_touchpad()

void outlong(){
	PORTD = 0b1;			//setting the value of portD0 to 1, outputting to the IR transmitter.
	delayms(dashtime);		//delay for a preset dashtime (200 time units, ~200 milliseconds).
	PORTD = 0b0;			//setting the value of portD0 to 0.
	delayms(dottime);		//delaying for a preset dottime (100 time units, ~100 milliseconds).
	textdisplay.da('-');	//displaying the corresponding Morse character to the text display, a dash/long.
}								//end of outlong()

void outshort(){
	PORTD = 0b1;			//setting the value of portB-0 to 1, outputting to the IR transmitter.
	delayms(dottime);		//delay for a preset dottime (100 time units, ~100 milliseconds).
	PORTD = 0b0;			//setting the value of portB-0 to 0.
	delayms(dottime);		//delaying for a preset dottime (100 time units, ~100 milliseconds).
	textdisplay.da('.');	//displaying the corresponding Morse character to the text display, a dot/short.
}								//end of outshort()

void delayms(int x){
	for (int i = 0; i < 4; i++) // general delay function, split into four equally sized for loops incase a large value gets placed here.
		for (int i = 0; i < 54*x/4; i++);
}									//end of delayms()
	

int morsedecode(char morseletter[4]){
	textdisplay.cursor_position(40);	//reset cursor position to bottom left of LCD.
	for(int i = 0; i < 4; i++)			//iterating through the 5 piece substring of instructionset from outputMorse function.
	if (morseletter[i] == '1')			//1 corresponds to a dash.
		outlong();						//outputting dash to IR transmitter.
	else if (morseletter[i] == '0')		//0 corresponds to a dot.
		outshort();						//outputting dot to IR transmitter.
	else if (morseletter[i] == '2')		//2 corresponds to the end of a character.
	{
		delayms(dashtime);				//have transmitter off for a dashtime cycle.
		textdisplay.da('_');			//output a "string end" symbol to the text display
		return 0;						//exit.
	}										//end of else if
	delayms(dashtime);					//same as if Morseletter was two at the very end, in case a 5 "bit" Morse character is sent (no 0 in this case, as Morse characters are max 5).
}											//end of morsedecode()

void clearinstructionqueue(){
	for (int i = instructionstep; i > 0; i--) //resetting values in the instructionset array with a for loop.
		instructionset[i] = 0;
	textdisplay.clear();					  //clearing LCD.
	textdisplay.home();						  //returning cursor to home position.
	instructionstep=0;						  //resetting instructionstep to 0.
}												//end of clearinstructionqueue()
